# In Yaml, spaces after colon is necessary.

# Replicaset/Deployment APIs are in apps, not core, so we need to say apps/v1.

# With a deployment, when we re-apply it, it is going to create a new replicaset, and the old replica set's replica count will be set to 0, ready for roll back.
  # If the new deployment failed, the old deployment won't be brought down and will still be working.
# To roll out or roll back, simply change the deployment definitions, and K8s will take care of it as we are defining a Deployment here
  # To check status of deployment, use $kubectl rollout status deploy[ment] webapp
  # To check roll out history, use $kubectl rollout history deploy[ment] webapp
  # To rollback, simply run $kubectl rollout undo deploy[ment] webapp [--to-revision=<revision>]
    # However the risk with the rollout undo is, now the yaml file isn't aligned with what's deployed, so this is only for being used in a real emergency.

apiVersion: apps/v1 
kind: Deployment
metadata:
# single pods will be named automatically by the replica set, so we do not need the name definition under "template"
  name: webapp 
spec:
  # minReadySeconds: the minimum duration that the new deployment needs to be up in order to be considered ready.
  # minReadySeconds: 30
  selector:
    matchLabels:
    # This means, the replica set is only going to manage pods that hits this selector.
      app: webapp
  replicas: 2
  # template for the pods
  template: 
    metadata:
    # Though we don't need a pod name here, the label is still necessary for the service to select the right pod.
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: richardchesterwood/k8s-fleetman-webapp-angular:release0-5

---

apiVersion: v1
kind: Pod
metadata:
  name: queue
  labels:
    app: queue
spec:
  containers:
  - name: queue
    image: richardchesterwood/k8s-fleetman-queue:release1

# Below are single pod definitions that we don't need anymore. We are using ReplicaSets/Deployments instead

# ---
# apiVersion: v1
# # make sure to use capital P for Pod
# kind: Pod 
# metadata:
# # intentation in yaml must be spaces, not tabs.
#   name: webapp-release-0-5
#   labels: 
#     app: webapp
#     release: "0-5"
# spec:
#   containers:
#   # dash means a list, as we can supply multiple containers in a pod.
#   - name: webapp 
#     image: richardchesterwood/k8s-fleetman-webapp-angular:release0-5

# # To create a pod, run $kubectl apply -f first-pod.yaml
# # To get basic info of that pod: $kubectl describe pod webapp
# # To execute a command (e.g. ls) on the pod: $kubectl exec webapp ls
# # To get a shell inside the pod: $kubectl -it exec webapp sh 

# # document separator. This comment cannot be added inline to the separator
# --- 

# # We create another deployment for the v0.5 of this app.
# # With this we can perform a simple upgrade with no downtime: Create the new pod first, and then re-configure the service to select the new pod by the new label.
# apiVersion: v1
# kind: Pod
# metadata:
#   name: webapp-release-0
#   labels:
#     app: webapp
#     release: "0"
# spec:
#   containers:
#   - name: webapp
#     image: richardchesterwood/k8s-fleetman-webapp-angular:release0
